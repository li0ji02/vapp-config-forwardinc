echo "[*] Loading ldif file"

DATAVOL=/solution/$CONFIG/../common/ldifs
LDIFFILE=forwardinc.ldif

myDsaNumber=`cat ${CONFIGURED} | head -n 1`

echo "[*] My dsa number $myDsaNumber"

if [ -e $DXHOME/data/dsa$myDsaNumber.db ]; then
	echo "[*] Data file already exists, skipping loading of ldif file"
else
	# get all dsas and sort by dsaNumber
	# iterate dsas
	#   if dsaNumber == myDsaNumber
	#     continue
	#   loop 5 times
	#     get backup timestamp
	#     if backup does not exist or backup timestamp older than 10 minutes
	#       post to create backup
	#     else   
	#       get backup
	#       if success
	#         break loop
	#     sleep (60 * (loop number + 1)) seconds (exponential backoff)
	# if db still not exist
	#   load from ldif
	
	# get all dsas from etcd sorted by dsa number
	# each line formatted as podName/podIP/dsaNumber
	sortedDsas=`curl http://dxgrid-discovery:2379/v2/keys/dsas | jq -r '.node.nodes | sort_by(.key | ltrimstr("/dsas/") | tonumber) | .[] | .value+"/"+(.key | ltrimstr("/dsas/"))'`
	echo "[*] sortedDsas: [$sortedDsas]"
	for aDsa in $sortedDsas; do
		echo "[*] aDsa: [$aDsa]"
		dsaIp=$(echo $aDsa | cut -d/ -f2)
		dsaNumber=$(echo $aDsa | cut -d/ -f3)
		echo "[*] dsaNumber:$dsaNumber dsaIp:$dsaIp"
		if [ $dsaNumber -eq $myDsaNumber ]; then
			continue
		fi
		attempt=0
		while true; do
			postCreate=0
			backup=$(curl -k --cert $DXHOME/config/ssld/personalities/dsa$myDsaNumber.pem --key $DXHOME/config/ssld/personalities/dsa$myDsaNumber.pem \
				https://$dsaIp:8443/ca/api/dxagent/v0.1/dsas/dsa$dsaNumber/backup)
			if [ $? -ne 0 ]; then
				break # dxagent cannot be contacted
			fi
			status=$(echo $backup | jq -r '.status')
			utcTimestamp=$(echo $backup | jq -r '.utcTimestamp')
			echo "[*] backup utcTimestamp: $utcTimestamp"
			if [ ! -z "$utcTimestamp" ] && [ "$utcTimestamp" != "null" ]; then
				# have a valid utcTimestamp, try to convert this to seconds
				seconds=$(date --date="$utcTimestamp" +%s)
				echo "[*] backup utcTimestamp: $seconds seconds"
				if echo "$seconds" | egrep -q '^[0-9]+$'; then
					# a valid number detected
					now=$(date +%s)
					lapsed=$(expr $now - $seconds)
					echo "[*] backup age: $lapsed seconds"
					if [ $lapsed -lt 600 ]; then
						# Backup is recent. Get it
						echo "[*] getting backup"
						curl -k --cert $DXHOME/config/ssld/personalities/dsa$myDsaNumber.pem --key $DXHOME/config/ssld/personalities/dsa$myDsaNumber.pem \
							-H "Accept: application/x-gzip" \
							-D /tmp/headers.txt \
							-o /tmp/backup.gz \
							https://$dsaIp:8443/ca/api/dxagent/v0.1/dsas/dsa$dsaNumber/backup
						# Verify MD5
						imd5=$(cat /tmp/headers.txt | egrep -i '^Content-Md5' | tr -d '\r' | cut -d' ' -f2)
						omd5=$(openssl dgst -md5 /tmp/backup.gz | cut -d' ' -f2)
						echo "[*] MD5 check $imd5:$omd5"
						if [ "$imd5" = "$omd5" ]; then
							gunzip -f /tmp/backup.gz
							mv -f /tmp/backup $DXHOME/data/dsa$myDsaNumber.db
							if [ -e $DXHOME/data/dsa$myDsaNumber.db ]; then
								echo "[*] successfully obtained backup from dsa$dsaNumber"
								break
							fi
						else
							echo "[*] MD5 mismatched"
							postCreate=1
						fi
					else
						# backup too old
						echo "[*] backup is too old"
						postCreate=1
					fi
				fi
			elif [ "$status" != "in progress" ]; then
				# No utcTimestamp in response and status is not "in progress".
				# Backup does not exist or other errors have occurred.
				# Request dsa to create backup.
				postCreate=1
			fi
			
			if [ $postCreate -eq 1 ]; then
				echo "[*] request dsa$dsaNumber to create backup"
				postResult=$(curl -XPOST -k --cert $DXHOME/config/ssld/personalities/dsa$myDsaNumber.pem --key $DXHOME/config/ssld/personalities/dsa$myDsaNumber.pem \
					https://$dsaIp:8443/ca/api/dxagent/v0.1/dsas/dsa$dsaNumber/backup)
			fi
			
			attempt=$(expr $attempt + 1)
			if [ $attempt -ge 5 ]; then
				break
			fi
			sleep 60
		done
		
		if [ -e $DXHOME/data/dsa$myDsaNumber.db ]; then
			# successfully obtained db from another dsa
			break
		fi
	done

	if [ ! -e $DXHOME/data/dsa$myDsaNumber.db ]; then
		# still no db file.. 
		# load from ldif as last resort
		echo "[*] Loading data from $DATAVOL/$LDIFFILE"
		dxloaddb -s dsa$myDsaNumber $DATAVOL/$LDIFFILE
	fi
	
	while read -r dsaNumber; do
		if [ $dsaNumber -ne $myDsaNumber ]; then
			echo "[*] dxdisp dsa$dsaNumber"
			dxdisp dsa$dsaNumber
		fi
	done < ${CONFIGURED}
fi
